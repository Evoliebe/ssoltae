<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cyber.smedu.mapper.UserMapper">
	<!-- 전체회원 로그인 -->
	<select id="login" parameterType="java.util.Map" resultType="com.cyber.smedu.user.domain.UserDomain">
	SELECT
		user_code as userCode,
		department_code as departmentCode,
		user_id as userId,
		user_pw as userPw,
		user_name as userName,
		user_level as userLevel,
		user_state as userState
	FROM user
	WHERE
		user_id = #{userId} and user_pw = #{userPw}
	</select>
	<!-- 교수 로그인 -->
	<select id="loginProfessor" parameterType="String" resultType="com.cyber.smedu.user.domain.ProfessorDomain">
	SELECT
		professor_code as professorCode
	FROM professor
	WHERE
		user_code = #{userCode}
	</select>
	<!-- 플래너 로그인 -->
	<select id="loginPlanner" parameterType="String" resultType="com.cyber.smedu.user.domain.PlannerDomain">
	SELECT
		planner_code as plannerCode
	FROM planner
	WHERE
		user_code = #{userCode}
	</select>
	<!-- 학생 로그인 -->
	<select id="loginStudent" parameterType="String" resultType="com.cyber.smedu.user.domain.StudentDomain">
	SELECT
		student_code as studentCode,
		cardinal_code as cardinalCode
	FROM student
	WHERE
		user_code = #{userCode}
	</select>
	<!-- 회원테이블 입력 -->
	<insert id="insertUser" parameterType="com.cyber.smedu.user.domain.UserDomain">
		INSERT INTO
		user(
			user_code,
			department_code,
			user_id,
			user_pw,
			user_name,
			user_birth,
			user_gender,
			user_address,
			user_phone,
			user_email,
			user_educational,
			user_level,
			user_join_date
		) VALUES(
			CONCAT('user_code',(SELECT COUNT(u.user_code)+1 FROM user u)),
			#{departmentCode},
			#{userId},
			#{userPw},
			#{userName},
			#{userBirth},
			#{userGender},
			#{userAddress},
			#{userPhone},
			#{userEmail},
			#{userEducational},
			#{userLevel},
			NOW()
		)
	</insert>
	<!-- 학생테이블 입력 -->
	<insert id="insertStudent" parameterType="com.cyber.smedu.user.domain.StudentDomain">
		INSERT INTO
		student(
			student_code,
			user_code,
			student_path,
			student_goal
		) VALUES (
			CONCAT('student_code',(SELECT COUNT(s.student_code)+1 FROM student s)),
			CONCAT('user_code',(SELECT COUNT(u.user_code) FROM user u)),
			#{studentPath},
			#{studentGoal}
		)
	</insert>
	
	<!-- 교수테이블 입력 -->
	<insert id="insertProfessor" parameterType="com.cyber.smedu.user.domain.ProfessorDomain">
		INSERT INTO 
		professor(
			professor_code, 
			user_code, 
			professor_bachelor, 
			professor_master, 
			professor_doctor, 
			professor_career
		) VALUES (
			CONCAT('professor_code',(SELECT COUNT(p.professor_code)+1 FROM professor p)),
			CONCAT('user_code',(SELECT COUNT(u.user_code) FROM user u)),
			#{professorBachelor},
			#{professorMaster},
			#{professorDoctor},
			#{professorCareer}
		)
	</insert>
	
	<!-- 플래너테이블 입력 -->
	<insert id="insertPlanner" parameterType="com.cyber.smedu.user.domain.PlannerDomain">
		INSERT INTO 
		planner(
			planner_code,
			user_code,
			planner_kakao
		) VALUES (
			CONCAT('planner_code',(SELECT COUNT(p.planner_code)+1 FROM planner p)),
			CONCAT('user_code',(SELECT COUNT(u.user_code) FROM user u)),
			#{plannerKakao}
		)
	</insert>
	<!-- 관리자 회원 리스트 출력 -->
	<select id="selectAdminUserList" parameterType="java.util.Map" resultType="com.cyber.smedu.user.domain.UserDomain">
	SELECT
		u.user_code as userCode,
		u.department_code as departmentCode,
		d.department_name as departmentName,
		u.user_name as userName,
		u.user_level as userLevel,
		u.user_join_date as userJoinDate,
		u.user_state as userState
	FROM
		user u 
	INNER JOIN
		department d
	ON 
		u.department_code = d.department_code		
	<where>		
		<if test="departmentCode != ''">
				u.department_code = #{departmentCode}
		</if>
		<if test="userLevel != ''">	
			AND 
				u.user_level = #{userLevel}
		</if>
		<if test="userName != ''">	
			AND
				u.user_name LIKE '%${userName}%'
		</if>
		<if test="userState != ''">	
			AND
				u.user_state = #{userState}
		</if>
	</where>
	
	ORDER BY 
		user_level
	
	</select>
	<!-- 관리자 회원 상세보기 -->
	<select id="selectAdminUserDetail" parameterType="String" resultType="com.cyber.smedu.user.domain.UserDomain">
	SELECT
		u.user_code as userCode,
		u.department_code as departmentCode,
		d.department_name as departmentName,
		u.user_id as userId,
		u.user_pw as userPw,
		u.user_name as userName,
		u.user_birth as userBirth,
		u.user_gender as userGender,
		u.user_address as userAddress,
		u.user_phone as userPhone,
		u.user_email as userEmail,
		u.user_educational as userEducational,
		u.user_level as userLevel,
		u.user_join_date as userJoinDate,
		u.user_state as userState,
		u.user_out_date as userOutDate
	FROM
		user u 
	INNER JOIN
		department d
	ON 
		u.department_code = d.department_code
	WHERE
		user_code = #{userCode}
	
	</select>
	<!-- 관리자 회원 상세보기 - 교수 -->
	<select id="selectAdminProfessorDetail" parameterType="String" resultType="com.cyber.smedu.user.domain.ProfessorDomain">
	SELECT
		professor_code as professorCode,
		user_code as userCode,
		professor_bachelor as professorBachelor,
		professor_master as professorMaster,
		professor_doctor as professorDoctor,
		professor_career as professorCareer
	FROM
		professor
	WHERE
		user_code = #{userCode}
	</select>
	<!-- 관리자 회원 상세보기 - 플래너 -->
	<select id="selectAdminPlannerDetail" parameterType="String" resultType="com.cyber.smedu.user.domain.PlannerDomain">
	SELECT
		planner_code as plannerCode,
		user_code as userCode,
		planner_kakao as plannerKakao
	FROM
		planner
	WHERE
		user_code = #{userCode}
	</select>
	<!-- 관리자 회원 상세보기 - 학생 -->
	<select id="selectAdminStudentDetail" parameterType="String" resultType="com.cyber.smedu.user.domain.StudentDomain">
	SELECT
		s.student_code as studentCode,
		s.cardinal_code as cardinalCode,
		c.year as year,
		c.semester as semester,
		c.cardinal as cardinal,
		s.user_code as userCode,
		s.student_path as studentPath,
		s.student_goal as studentGoal
	FROM
		student s
	INNER JOIN
		cardinal c
	ON
		s.cardinal_code = c.cardinal_code
	WHERE
		user_code = #{userCode}
	</select>		
	<!-- 관리자 가입승인 요청 리스트 플래너,교수 -->
	<select id="selectAdminJoinRequestList" resultType="com.cyber.smedu.user.domain.UserDomain">
	SELECT
		u.user_code as userCode,
		u.department_code as departmentCode,
		d.department_name as departmentName,
		u.user_name as userName,
		u.user_phone as userPhone,
		u.user_email as userEmail,
		u.user_level as userLevel,
		u.user_join_date as userJoinDate,
		u.user_state as userState
	FROM
		user u 
	INNER JOIN
		department d
	ON 
		u.department_code = d.department_code
	where
		u.user_state = '승인대기'
	</select>
	
	<!-- 관리자 페이지 학생 성적관리 학생리스트 출력 -->
	<select id="selectAdminStudentList" parameterType="java.util.Map" resultType="com.cyber.smedu.user.domain.StudentDomain">
	SELECT
		u.user_code as userCode,
		u.user_name as userName,
		u.department_code as departmentCode,
		u.user_birth as userBirth,
		s.student_code as studentCode,
		s.cardinal_code as cardinalCode
	FROM
		user u
	INNER JOIN
		student s
	ON
		u.user_code = s.user_code	
	WHERE
		u.user_level = '학생'
	AND
		u.user_state = '정상'
	<if test="departmentCode != ''">
	AND
		u.department_code = #{departmentCode}
	</if>
	<if test="userName != ''">
	AND
		u.user_name LIKE '%${userName}%'
	</if>
	</select>
	<!-- 관리자 페이지 학생 성적관리 학생 상세보기 출력 (학생정보와 학과명) -->
	<select id="selectAdminStudentGradeDetail" parameterType="String" resultType="com.cyber.smedu.user.domain.UserDomain">
	SELECT
		u.user_code as userCode,
		u.user_name as userName,
		u.department_code as departmentCode,
		d.department_name as departmentName,
		u.user_level as userLevel,
		u.user_birth as userBirth
	FROM
		user u
	INNER JOIN
		department d
	ON
		u.department_code = d.department_code
	WHERE
		u.user_code = #{userCode}
	</select>
	<!-- 한명의 학생 회원정보 -->
	<select id="studentSelectOne" 
			parameterType="String" 
			resultType="com.cyber.smedu.user.domain.StudentDomain">
		SELECT	
			u.user_code AS userCode,
			u.department_code AS departmentCode,
			d.department_name AS departmentName,
			u.user_id AS userId,
			u.user_pw AS userPw,
			u.user_name AS userName,
			u.user_birth AS userBirth,
			u.user_gender AS userGender,
			u.user_address AS userAddress,
			u.user_phone AS userPhone,
			u.user_email AS userEmail,
			u.user_educational AS userEducational,
			u.user_state AS userState,
			s.student_code AS studentCode,
			s.cardinal_code AS cardinalCode,
			s.student_path AS studentPath,
			s.student_goal AS studentGoal
		FROM 
			user u 
		INNER JOIN
			student s
		ON 
			u.user_code = s.user_code
		INNER JOIN 
			department d
		ON 
			u.department_code = d.department_code
		WHERE 
			u.user_code = #{userCode}
	</select>
	
	
	<!-- 한명의 학생 기수조회 -->
	<select id="cardinalSelectOne"
			parameterType="String"
			resultType="com.cyber.smedu.academiccalendar.domain.CardinalDomain">
	SELECT 	
		cardinal_code AS cardinalCode,
		year AS year,
		semester AS semester,
		cardinal AS cardinal,
		recruit_start_day AS recruitStartDay,
		recruit_end_day AS recruitEndDay,
		class_start_day AS classStartDay,
		class_end_day AS classEndDay	
	FROM cardinal 
	WHERE cardinal_code = #{cardinalCode}	
	</select>
	
	<update id="studentUpdate"
			parameterType="com.cyber.smedu.user.domain.StudentDomain">
	UPDATE student as s INNER JOIN user as u
	ON s.user_code = u.user_code
	
	SET
		u.user_address = #{userAddress},
		u.user_phone = #{userPhone},
		u.user_email = #{userEmail},
		u.user_educational = #{userEducational},
		s.student_path = #{studentPath},
		s.student_goal = #{studentGoal}
	
	WHERE s.user_code = #{userCode};	
	</update>	
	
	<!-- 한명의 교수 회원 정보를 select하는 쿼리 -->
	<select id="professorSelectOne" 
		parameterType="String"
		resultType="com.cyber.smedu.user.domain.ProfessorDomain">

		SELECT
			u.user_code AS userCode,
			p.professor_code AS professorCode,
			u.department_code AS departmentCode,
			d.department_name AS departmentName,
			u.user_id AS userId,
			u.user_pw AS userPw,
			u.user_name AS userName,
			u.user_birth AS userBirth,
			u.user_gender AS userGender,
			u.user_address AS userAddress,
			u.user_phone AS userPhone,
			u.user_email AS userEmail,
			u.user_educational AS userEducational,
			u.user_state AS userState,
			p.professor_bachelor AS professorBachelor,
			p.professor_master AS professorMaster,
			p.professor_doctor AS professorDoctor,
			p.professor_career AS professorCareer
		FROM 
			user u 
		INNER JOIN
			professor p
		ON 
			u.user_code = p.user_code
		INNER JOIN 
			department d
		ON 
			u.department_code = d.department_code
		WHERE 
			u.user_code = #{userCode}

	</select>

	<!-- 교수 정보를 update 하는 쿼리 -->	
	<update id="professorUpdate"
		parameterType="com.cyber.smedu.user.domain.ProfessorDomain">
	UPDATE 
		user u 
	INNER JOIN 
		professor p 
	ON 
		u.user_code = p.user_code
	SET 
		u.user_address = #{userAddress},
		u.user_phone = #{userPhone},
		u.user_email = #{userEmail},
		u.user_educational = #{userEducational},
		p.professor_career = #{professorCareer}
	WHERE 
		u.user_code = #{userCode}
	
	</update>

	<!-- 회원 탈퇴 시 user 테이블에 상태와 탈퇴날짜가 update 되는 쿼리 -->
	<update id="userStateUpdate"
		parameterType="String">
	
	UPDATE 
		user
	SET 
		user_state='탈퇴',
		user_out_date=NOW()
	WHERE
		user_code=#{userCode};
	
	</update>
	
	<select id="professorSelectInfo"
		parameterType="String"
		resultType="com.cyber.smedu.user.domain.ProfessorDomain">
		SELECT
			u.user_code AS userCode,
			p.professor_code AS professorCode,
			d.department_name AS departmentName,
			u.user_id AS userId,
			u.user_name AS userName,
			u.user_birth AS userBirth,
			u.user_gender AS userGender,
			u.user_address AS userAddress,
			u.user_phone AS userPhone,
			u.user_email AS userEmail,
			p.professor_bachelor AS professorBachelor,
			p.professor_master AS professorMaster,
			p.professor_doctor AS professorDoctor,
			p.professor_career AS professorCareer
		FROM 
			user u 
		INNER JOIN
			professor p
		ON 
			u.user_code = p.user_code
		INNER JOIN 
			department d
		ON 
			u.department_code = d.department_code
		WHERE 
			p.professor_code = #{professorCode}
	</select>
	
	<select id="userIdCheck" parameterType="String" resultType="com.cyber.smedu.user.domain.UserDomain">
		SELECT 
			user_id as userId
		FROM 
			user
		WHERE
			user_id = #{userId}
	</select>	
	
	<select id="selectStudentName"
			parameterType="String" resultType="com.cyber.smedu.user.domain.UserDomain">
		SELECT
			u.user_name as userName
		FROM
			user u
		INNER JOIN
		  	student s
		ON
			u.user_code = s.user_code
		WHERE
			s.student_code = #{studentCode}
		
			
			
			
	</select>
	
	<!-- 진호 -->
</mapper>